---
apiVersion: v1
kind: Namespace
metadata:
  name: beta-jellyfin
  labels:
    name: beta-jellyfin



---
kind: Service
apiVersion: v1
metadata:
  name: beta-jellyfin-udp       # < name of the service
  namespace: beta-jellyfin      # < namespace where to place service
  annotations:
    metallb.universe.tf/allow-shared-ip: beta-jellyfin # < annotation name to combine the Service IP, make sure it's same name as in the service UDP yaml
spec:
  selector:
    app: beta-jellyfin          # < reference to the deployment (connects the service with the deployment)
  ports:
  - port: 1900             # < port to open on the outside on the server
    targetPort: 1900       # < targetport. port on the pod to passthrough
    name: dlna-udp         # < reference name for the port in the deployment yaml
    protocol: UDP
  - port: 7359
    targetPort: 7359
    name: discovery-udp
    protocol: UDP
  type: LoadBalancer
  loadBalancerIP: 192.168.3.91 # < IP to access your jellyfinserver. Should be one from the MetalLB range and the same as the UDP yaml
  sessionAffinity: ClientIP # This is necessary for multi-replica deployments
---
kind: Service
apiVersion: v1
metadata:
  name: beta-jellyfin-tcp       # < name of the service
  namespace: beta-jellyfin      # < namespace where to place service
  annotations:
    metallb.universe.tf/allow-shared-ip: beta-jellyfin # < annotation name to combine the Service IP, make sure it's same name as in the service UDP yaml
spec:
  selector:
    app: beta-jellyfin          # < reference to the deployment (connects the service with the deployment)
  ports:
  - port: 8096             # < port to open on the outside on the server
    targetPort: 8096       # < targetport. port on the pod to passthrough
    name: http-tcp         # < reference name for the port in the deployment yaml
    protocol: TCP
  - port: 8920
    targetPort: 8920
    name: https-tcp
  type: LoadBalancer
  loadBalancerIP: 192.168.3.91 # < IP to access your jellyfinserver. Should be one from the MetalLB range and the same as the TCP yaml
  sessionAffinity: ClientIP # This is necessary for multi-replica deployments



---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: beta-jellyfin-pv-nfs-data   # < name of the persisant volume ("pv") in kubenetes
  namespace: beta-jellyfin            # < namespace where place the pv
spec:
  storageClassName: ""
  capacity:
    storage: 16Gi                   # < max. size we reserve for the pv
  accessModes:
    - ReadWriteMany                # < Multiple pods can write to storage 
  persistentVolumeReclaimPolicy: Retain # < The persistent volume can reclaimed 
  nfs:
    path: /mnt/servicesTank/beta-jellyfin       # < Name of your NFS share with subfolder
    server: 192.168.1.10      # < IP number of your NFS server
    readOnly: false
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: beta-jellyfin-pv-nfs-media
  namespace: beta-jellyfin
spec:
  storageClassName: ""
  capacity:
    storage: 8Gi                   # < max. size we reserve for the pv. A bigger value than the configdata
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: /mnt/cpool1/media          
    server: 192.168.1.10
    readOnly: false



---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: beta-jellyfin-pvc-data   # < name of the persistant volume claim ("pvc'")
  namespace: beta-jellyfin         # < namespace where place the pvc
spec:
  storageClassName: ""
  volumeName: beta-jellyfin-pv-nfs-data  # < the pv it will "claim" to storage. Created in the previous yaml.
  accessModes:
    - ReadWriteMany             # < Multiple pods can write to storage. Same value as pv
  volumeMode: Filesystem
  resources:
    requests:
      storage: 16Gi              # < How much data can the pvc claim from pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: beta-jellyfin-pvc-media
  namespace: beta-jellyfin
spec:
  storageClassName: ""
  volumeName: beta-jellyfin-pv-nfs-media
  accessModes:
    - ReadWriteMany
  volumeMode: Filesystem
  resources:
    requests:
      storage: 8Gi



---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: beta-jellyfin
  namespace: beta-jellyfin
spec:
  selector:
    matchLabels:
      app: beta-jellyfin
  replicas: 1
  template:
    metadata:
      labels:
        app: beta-jellyfin
    spec:
      securityContext:
        fsGroup: 3048
        supplementalGroups: 
          - 44
          - 105
          - 226
      containers:
      - name: beta-jellyfin
        image: jellyfin/jellyfin
        command:
          - "/jellyfin/jellyfin"
        args:
          - "--datadir=/data"
          - "--configdir=/data/config"
          - "--logdir=/data/logs"
          - "--cachedir=/data/cache"
        volumeMounts:
        - name: data-volume
          mountPath: /data
        - name: media-volume
          mountPath: /media
#        - name: intel-quicksync
#          mountPath: /dev/dri/renderD128          
        env:
        - name: JELLYFIN_PublishedServerUrl
          value: 192.168.3.91
        ports:
        - containerPort: 8096
          name: http-tcp
          protocol: TCP
        - containerPort: 8920
          name: https-tcp
          protocol: TCP
        - containerPort: 1900
          name: dlna-udp
          protocol: UDP
        - containerPort: 7359
          name: discovery-udp
          protocol: UDP 
        resources:
          limits:
            cpu: "2000m"
            memory: "2048Mi"
            gpu.intel.com/i915: 1
          requests:
            cpu: "500m"
            memory: "256Mi"
        securityContext:                   # Container securityContext
          privileged: false
          runAsUser: 103048
          runAsGroup: 103048
#          allowPrivilegeEscalation: true
#          capabilities:
#            drop: ["ALL"]
#            allowPrivilegeEscalation: false
      restartPolicy: "Always"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: host
                operator: In
                values:
                - metal
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: beta-jellyfin-pvc-data
      - name: media-volume
        persistentVolumeClaim:
          claimName: beta-jellyfin-pvc-media
#      - name: intel-quicksync
#        hostPath:
#          path: /dev/dri/renderD128
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1